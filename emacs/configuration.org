#+title: Emacs Configuration
#+author: Andrey Koppel (akoppela)
#+email: akoppela@gmail.com

* Defaults

** Personal info

   #+begin_src emacs-lisp
     (setq user-full-name "Andrey Koppel")
     (setq user-mail-address "akoppela@gmail.com")
   #+end_src

** Increase garbage collection threshold before startup

   #+begin_src emacs-lisp
     (defvar last-file-name-handler-alist file-name-handler-alist)
     (setq gc-cons-threshold (* 1024 1024 50))
     (setq gc-cons-percentage 0.6)
     (setq file-name-handler-alist nil)

     (add-hook 'emacs-startup-hook
               (lambda ()
                 (setq gc-cons-threshold (* 1024 1024 2))
                 (setq gc-cons-percentage 0.1)
                 (setq file-name-handler-alist last-file-name-handler-alist)))
   #+end_src

** Measure startup time

   #+begin_src emacs-lisp
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "Emacs ready in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))
   #+end_src

** Tangle configuration on save

   #+begin_src emacs-lisp
     (defun my/tangle-configuration ()
       "If the current file is this file, the code blocks are tangled"
       (when (equal (buffer-file-name) (expand-file-name my/configuration-org))
         (org-babel-tangle nil my/configuration-el)))

     (add-hook 'after-save-hook 'my/tangle-configuration)

     (defun my/open-configuration ()
       "Opens emacs configuration."
       (interactive)
       (find-file my/configuration-org))
   #+end_src

** Setup encoding to UTF-8

   #+begin_src emacs-lisp
     (setq coding-system-for-read 'utf-8)
     (setq coding-system-for-write 'utf-8)
   #+end_src

** Start with users home directory by default

   #+begin_src emacs-lisp
     (setq default-directory "~/")
   #+end_src

** Increase read process output

   #+begin_src emacs-lisp
     (setq read-process-output-max (* 1024 1024 5))
   #+end_src

** Delete trailing whitespace everytime buffer is saved

   #+begin_src emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src

** Always follow symlinks when opening a file

   #+begin_src emacs-lisp
     (setq vc-follow-symlinks t)
   #+end_src

** Make sure sentenses does not have two spaces after periods

   #+begin_src emacs-lisp
     (setq-default sentense-end-double-space nil)
   #+end_src

** Ask before closing Emacs

   #+begin_src emacs-lisp
     (setq confirm-kill-emacs 'y-or-n-p)
   #+end_src

** Set backup and auto save files directory

   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+end_src

** Shorten yes/no answers

   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

** Do not add newline at the end of a file

   #+begin_src emacs-lisp
     (setq require-final-newline nil)
     (setq mode-require-final-newline nil)
   #+end_src

** Set =Firefox= as default browser

   #+begin_src emacs-lisp
     (setq browse-url-browser-function 'browse-url-firefox)
     (setq browse-url-firefox-new-window-is-tab t)
   #+end_src

** Revert TAGS file without asking

   #+begin_src emacs-lisp
     (setq-default tags-revert-without-query t)
   #+end_src

** Automatically rescan =imenu=

   #+begin_src emacs-lisp
     (setq-default imenu-auto-rescan t)
   #+end_src

** Do not lock files

   #+begin_src emacs-lisp
     (setq create-lockfiles nil)
   #+end_src

** Do not create custom file

   #+begin_src emacs-lisp
     (setq custom-file "/dev/null")
   #+end_src

** Paste to MacOS clipboard

   #+begin_src emacs-lisp
     (defun paste-to-osx (text)
       "Copies content of clipboard from Emacs to MacOS"
       (let ((process-connection-type nil))
         (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
           (process-send-string proc text)
           (process-send-eof proc))))

     (setq interprogram-cut-function 'paste-to-osx)
   #+end_src

** =flyspell=

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'flyspell-mode)
     (add-hook 'prog-mode-hook 'flyspell-prog-mode)
     (add-hook 'org-mode-hook 'flyspell-mode)
   #+end_src

** Narrow

   #+begin_src emacs-lisp
     (put 'narrow-to-region 'disabled nil)
     (put 'narrow-to-page 'disabled nil)
   #+end_src

* Package management

** Initialize =package.el= and include Org, Gnu and Melpa package archives

   #+begin_src emacs-lisp
     (setq package-enable-at-startup nil)
     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")
                              ("melpa-stable" . "https://stable.melpa.org/packages/")))
   #+end_src

** Make sure =use-package= is installed

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC

** Make sure packages are always installed

   #+begin_src emacs-lisp
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
   #+end_src

* Keybindings

** =hydra=

   #+begin_src emacs-lisp
     (use-package hydra
       :defer t)
   #+end_src

** =general=

   #+begin_src emacs-lisp
     (defhydra my/hydra-window-resize ()
       "Resize window"
       ("[" shrink-window-horizontally "shrink horizontally")
       ("]" enlarge-window-horizontally "enlarge horizontally")
       ("{" shrink-window "shrink vertically")
       ("}" enlarge-window "enlarge vertically"))

     (defun my/split-window-toggle ()
       "Toggles window split from horizontal to vertical and vice versa."
       (interactive)
       (if (= (count-windows) 2)
           (let* ((this-win-buffer (window-buffer))
                  (next-win-buffer (window-buffer (next-window)))
                  (this-win-edges (window-edges (selected-window)))
                  (next-win-edges (window-edges (next-window)))
                  (this-win-2nd (not (and (<= (car this-win-edges)
                                              (car next-win-edges))
                                          (<= (cadr this-win-edges)
                                              (cadr next-win-edges)))))
                  (splitter
                   (if (= (car this-win-edges) (car (window-edges (next-window))))
                       'split-window-horizontally
                     'split-window-vertically)))
             (delete-other-windows)
             (let ((first-win (selected-window)))
               (funcall splitter)
               (if this-win-2nd (other-window 1))
               (set-window-buffer (selected-window) this-win-buffer)
               (set-window-buffer (next-window) next-win-buffer)
               (select-window first-win)
               (if this-win-2nd (other-window 1))))))

     (defun my/delete-file-and-buffer ()
       "Kill the current buffer and delete the file it's visiting."
       (interactive)
       (let ((filename (buffer-file-name)))
         (if filename
             (if (vc-backend filename)
                 (vc-delete-file filename)
               (progn (delete-file filename)
                      (message "Deleted file %s." filename)
                      (kill-buffer)))
           (message "Can't delete file."))))

     (use-package general
       :init
       (general-create-definer leader-def
         :states '(normal visual insert motion emacs)
         :keymaps 'override
         :prefix "SPC"
         :non-normal-prefix "M-SPC")
       (general-create-definer major-def
         :states '(normal visual insert motion emacs)
         :keymaps 'override
         :prefix ","
         :non-normal-prefix "M-,")
       (leader-def
         ;; Main menu
         "" nil
         "u" '(universal-argument :which-key "universal argument")
         ;; Buffer
         "b" '(:ignore t :which-key "buffer")
         "b l" '(ibuffer :which-key "list")
         "b d" '(kill-current-buffer :which-key "delete")
         "b x" '(kill-buffer-and-window :which-key "delete with window")
         "b s" '(save-some-buffers :which-key "save")
         "b e" '(eval-buffer :which-key "eval")
         "b r" '(rename-buffer :which-key "rename")
         "b R" '(revert-buffer :which-key "revert")
         ;; Window
         "w" '(:ignore t :which-key "window")
         "w TAB" '(other-window :which-key "next")
         "w d" '(delete-window :which-key "delete")
         "w D" '(delete-other-windows :which-key "delete other")
         "w r" '(my/hydra-window-resize/body :which-key "resize")
         "w s" '(:ignore t :which-key "split")
         "w s h" '(split-window-below :which-key "horizontally")
         "w s v" '(split-window-right :which-key "vertically")
         "w s t" '(my/split-window-toggle :which-key "toggle")
         ;; File
         "f" '(:ignore t :which-key "file")
         "f s" '(save-buffer :which-key "save")
         "f r" '(rename-file :which-key "rename")
         "f d" '(my/delete-file-and-buffer :which-key "delete")
         "f c" '(copy-file :which-key "copy")
         "f e" '(:ignore t :which-key "emacs")
         "f e c" '(my/open-configuration :which-key "configuration")
         ;; Project
         "p" '(:ignore t :which-key "project")
         ;; Application
         "a" '(:ignore t :which-key "application")
         ;; Search
         "s" '(:ignore t :which-key "search")
         ;; Error
         "e" '(:ignore t :which-key "error")
         "e w" '(flyspell-auto-correct-word :which-key "auto correct word")
         ;; Narrow
         "n" '(:ignore t :which-key "narrow")
         "n f" '(narrow-to-defun :which-key "function")
         "n r" '(narrow-to-region :which-key "region")
         "n w" '(widen :which-key "widen")
         ;; Jump
         "j" '(:ignore t :which-key "jump")
         ;; Help
         "h" '(:ignore t :which-key "help")
         "h P" '(describe-package :which-key "package")
         "h m" '(describe-mode :which-key "describe mode")
         "h i" '(info :which-key "info")
         ;; Quit
         "q" '(:ignore t :which-key "quit")
         "q q" '(save-buffers-kill-terminal :which-key "client")
         "q Q" '(save-buffers-kill-emacs :which-key "server"))
       (general-def
         :states '(normal visual)
         :keymaps 'ibuffer-mode-map
         "q" 'kill-buffer-and-window))
   #+end_src

** =evil=

   #+begin_src emacs-lisp
     (use-package evil
       :init
       (setq evil-want-C-i-jump nil)
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-undo-system 'undo-fu) ;; TODO: Change to native undo-redo from Emacs 28
       (setq evil-normal-state-tag "N")
       (setq evil-insert-state-tag "I")
       (setq evil-visual-state-tag "V")
       (setq evil-replace-state-tag "R")
       (setq evil-operator-state-tag "O")
       (setq evil-motion-state-tag "M")
       (setq evil-emacs-state-tag "E")
       :config
       (evil-mode 1))

     (use-package evil-collection
       :after evil
       :init
       (setq evil-collection-setup-minibuffer t)
       (setq-default evil-collection-outline-bind-tab-p nil)
       (setq-default evil-collection-company-use-tng nil)
       :config
       (evil-collection-init))

     (use-package evil-surround
       :hook
       ((evil-visual-state-entry . turn-on-evil-surround-mode)
        (evil-operator-state-entry . turn-on-evil-surround-mode)))

     (use-package evil-commentary
       :commands (evil-commentary evil-commentary-yank)
       :init
       (general-def
         :states 'normal
         "g c" 'evil-commentary
         "g r" 'evil-commentary-yank))

     (use-package evil-anzu
       :after evil
       :init
       (setq anzu-cons-mode-line-p nil)
       :config
       (global-anzu-mode 1))
   #+end_src

* Appearance

** Hide default Emacs screen

   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
   #+end_src

** Load custom theme

   #+begin_src emacs-lisp
     (use-package color-theme-sanityinc-tomorrow
       :load-path "my/color-theme-sanityinc-tomorrow"
       :config
       (load-theme 'sanityinc-tomorrow-akoppela t))
   #+end_src

** =modeline= specific

   #+begin_src emacs-lisp
     (use-package doom-modeline
       :config (doom-modeline-mode 1))
   #+end_src

** Hide menu, tool and scroll bars

   #+begin_src emacs-lisp
     (tool-bar-mode 0)
     (when (display-graphic-p) (scroll-bar-mode 0))
     (menu-bar-mode (if (display-graphic-p) 1 0))
   #+end_src

** Enable current line highlighting

   #+begin_src emacs-lisp
     (global-hl-line-mode 1)
   #+end_src

** Turn on syntax highlighting whenever possible

   #+begin_src emacs-lisp
     (global-font-lock-mode 1)
   #+end_src

** Visually indicate matching parentheses

   #+begin_src emacs-lisp
     (show-paren-mode 1)
     (setq-default show-paren-delay 0.0)
   #+end_src

** Flash screen on invalid operation

   #+begin_src emacs-lisp
     (setq visible-bell t)
   #+end_src

** Display visual line numbers

   Visual lines are relative screen lines.

   #+begin_src emacs-lisp
     (global-display-line-numbers-mode)
     (setq-default display-line-numbers-type 'visual)
     (setq-default display-line-numbers-width-start t)
   #+end_src

** Always indent with spaces

   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src

** Use 4 spaces for tabs

   #+begin_src emacs-lisp
     (setq-default tab-width 4)
   #+end_src

** Smooth scroll

   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src

** Center cursor vertically

   #+begin_src emacs-lisp
     (use-package centered-cursor-mode
       :hook (prog-mode org-mode))
   #+end_src

** Buffer list grouping

   #+begin_src emacs-lisp
     (use-package ibuffer-vc
       :hook
       ((ibuffer . ibuffer-vc-set-filter-groups-by-vc-root)
        (ibuffer . ibuffer-do-sort-by-recency))
       :init
       (setq ibuffer-formats
             '((mark modified read-only locked vc-status-mini
                     " "
                     (name 18 18 :left :elide)
                     " "
                     (size 9 -1 :right)
                     " "
                     (mode 16 16 :left :elide)
                     " "
                     vc-relative-file))))
   #+end_src

** Show visual indicator for column rule

   #+begin_src emacs-lisp
     (setq-default display-fill-column-indicator-column 80)
     (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
   #+end_src

* Navigation, search and completion

** =counsel= completion framework

   #+begin_src emacs-lisp
     (use-package ivy
       :init
       (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
       (setq ivy-use-selectable-prompt t)
       (setq counsel-rg-base-command
             '("rg"
               "-M" "240"
               "--hidden"
               "--with-filename"
               "--no-heading"
               "--line-number"
               "--color" "never"
               "%s"))
       (major-def
         :keymaps 'ivy-minibuffer-map
         "o" '(ivy-occur :which-key "occur")
         "a" '(ivy-read-action :which-key "action"))
       (leader-def
         "SPC" '(counsel-M-x :which-key "M-x")
         ;; Buffer
         "b b" '(ivy-switch-buffer :which-key "switch")
         ;; File
         "f f" '(counsel-find-file :which-key "find")
         "f l" '(counsel-find-library :which-key "library")
         ;; Search
         "s s" '(swiper-isearch :which-key "buffer")
         "s S" '(swiper-isearch-thing-at-point :which-key "buffer with thing at point")
         "s i" '(counsel-imenu :which-key "imenu")
         ;; Jump
         "j m" '(counsel-mark-ring :which-key "mark")
         ;; Help
         "h a" '(counsel-apropos :which-key "apropos")
         "h b" '(counsel-descbinds :which-key "bindings")
         "h f" '(counsel-describe-function :which-key "describe function")
         "h v" '(counsel-describe-variable :which-key "describe variable"))
       :config
       (ivy-mode 1))
   #+end_src

** =wgrep= to edit search

   #+begin_src emacs-lisp
     (use-package wgrep
       :commands ivy-wgrep-change-to-wgrep-mode)
   #+end_src

** =treemacs= file explorer

   #+begin_src emacs-lisp
     (use-package treemacs
       :commands treemacs
       :init
       (leader-def
         "p t" '(treemacs :which-key "treemacs")))

     (use-package treemacs-evil
       :after treemacs)

     (use-package treemacs-projectile
       :after treemacs)
   #+end_src

** =company= enables auto-completion

   #+begin_src emacs-lisp
     (defun my/company-complete-common-or-cycle-backward ()
       "Complete common prefix or cycle backward."
       (interactive)
       (company-complete-common-or-cycle -1))

     (use-package company
       :hook (prog-mode . company-mode)
       :init
       (setq company-idle-delay 0)
       (setq company-require-match nil)
       (setq company-minimum-prefix-length 1)
       (setq company-dabbrev-downcase nil)
       (setq company-dabbrev-ignore-case nil)
       :config
       (general-def
         :keymaps 'company-active-map
         "TAB" 'company-complete-common-or-cycle
         "<backtab>" 'my/company-complete-common-or-cycle-backward))
   #+end_src

** =flycheck= checks syntax

   #+begin_src emacs-lisp
     (use-package flycheck
       :commands flycheck-mode
       :init
       (setq flycheck-check-syntax-automatically '(mode-enabled save))
       :config
       (leader-def
         "e v" '(flycheck-verify-setup :which-key "verify setup")
         "e n" '(flycheck-next-error :which-key "next")
         "e N" '(flycheck-previous-error :which-key "previous")
         "e l" '(flycheck-list-errors :which-key "list")))
   #+end_src

** =ace-window=

   #+begin_src emacs-lisp
     (use-package ace-window
       :commands ace-window
       :init
       (leader-def
         "w a" '(ace-window :which-key "ace")))
   #+end_src

** =avy=

   #+Begin_src emacs-lisp
     (use-package avy
       :commands (avy-goto-subword-1 avy-goto-word-1)
       :init
       (leader-def
         "j s" '(avy-goto-subword-1 :which-key "subword")
         "j w" '(avy-goto-word-1 :which-key "word")))
   #+end_src

** =engine-mode= to search on the web

   #+begin_src emacs-lisp
     (use-package engine-mode
       :commands (engine/search-google engine/search-wikipedia)
       :init
       (defengine google
         "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")
       (defengine wikipedia
         "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s")
       (leader-def
         "s b" '(engine/search-google :which-key "browser")
         "s w" '(engine/search-wikipedia :which-key "wiki")))
   #+end_src

* Project, time and task management

** =session=

   Make sessions persistent.

   #+begin_src emacs-lisp
     (use-package session
       :hook (after-init . session-initialize)
       :init
       (setq session-save-file (expand-file-name ".session" user-emacs-directory))
       (setq session-save-file-coding-system 'utf-8))
   #+end_src

** =projectile=

   #+begin_src emacs-lisp
     (defun my/counsel-projectile-rg ()
       "Calls counsel-projectile-rg with no initial input"
       (interactive)
       (progn
         (setq-default counsel-projectile-rg-initial-input nil)
         (counsel-projectile-rg)))

     (defun my/counsel-projectile-rg-at-point ()
       "Calls counsel-projectile-rg with ivy-at-point"
       (interactive)
       (progn
         (setq-default counsel-projectile-rg-initial-input (ivy-thing-at-point))
         (counsel-projectile-rg)))

     (use-package projectile
       :commands
       (counsel-projectile-rg
        counsel-projectile-find-file
        counsel-projectile-switch-project
        counsel-projectile-switch-to-buffer
        projectile-project-p)
       :init
       (setq projectile-completion-system 'ivy)
       (leader-def
         "/" '(my/counsel-projectile-rg :which-key "find in project")
         "*" '(my/counsel-projectile-rg-at-point :which-key "find in project at point")
         "p f" '(counsel-projectile-find-file :which-key "find file")
         "p p" '(counsel-projectile-switch-project :which-key "switch")
         "p b" '(counsel-projectile-switch-to-buffer :which-key "buffer"))
       :config
       (projectile-mode 1))

     (use-package counsel-projectile
       :after projectile
       :config
       (counsel-projectile-mode 1))
   #+end_src

** =magit=

   #+begin_src emacs-lisp
     (use-package magit
       :commands
       (magit-status
        magit-blame-addition
        magit-clone
        magit-log-buffer-file)
       :init
       (setq magit-blame-styles
             '((margin
                (margin-format " %a - %s%f" " %C" " %H")
                (margin-width . 42)
                (margin-face . magit-blame-margin)
                (margin-body-face magit-blame-dimmed))))
       (leader-def
         "g" '(:ignore t :which-key "git")
         "g s" '(magit-status :which-key "status")
         "g b" '(magit-blame-addition :which-key "blame")
         "g c" '(magit-clone :which-key "clone")
         "g h" '(magit-log-buffer-file :which-key "history"))
       :config
       (add-hook 'git-commit-mode-hook 'flyspell-mode))
   #+end_src

** =org-mode=

*** Keybindings

    #+begin_src emacs-lisp
      (defun my/open-notes ()
        "Opens my notes."
        (interactive)
        (find-file (expand-file-name "~/Notes/notes.org")))

      (leader-def
        "a n" '(my/open-notes :which-key "notes"))

      (leader-def
        :keymaps '(org-mode-map outline-minor-mode-map)
        "n s" '(org-narrow-to-subtree :which-key "subtree"))

      (major-def
        :keymaps 'org-mode-map
        "'" '(org-edit-special :which-key "src editor")
        "e" '(org-export-dispatch :which-key "export")
        "a" '(org-agenda :which-key "agenda")
        "t" '(org-todo :which-key "toggle todo")

        "i" '(:ignore t :which-key "insert")
        "i t" '(org-insert-structure-template :which-key "template")

        "d" '(:ignore t :which-key "date")
        "d s" '(org-schedule :which-key "schedule")

        "s" '(:ignore t :which-key "subtree")
        "s r" '(org-refile :which-key "refile"))
    #+end_src

*** Agenda files

    #+begin_src emacs-lisp
      (setq org-agenda-files (list "~/Notes/notes.org"))
    #+end_src

*** Show bullets instead of stars

    #+begin_src emacs-lisp
      (use-package org-bullets
        :hook (org-mode . org-bullets-mode))
    #+end_src

*** Hide leading stars

    #+begin_src emacs-lisp
      (setq org-hide-leading-stars t)
    #+end_src

*** Change collapsed subtree symbol

    #+begin_src emacs-lisp
      (setq org-ellipsis " ↴")
    #+end_src

*** Make TAB act natively for code blocks

    #+begin_src emacs-lisp
      (setq org-src-tab-acts-natively t)
    #+end_src

*** Log TODO's done progress

    #+begin_src emacs-lisp
      (setq org-log-done t)
    #+end_src

*** Better =org-refile=

    #+begin_src emacs-lisp
      (setq-default org-refile-targets
                    '((org-agenda-files :maxlevel . 2)
                      (my/configuration-org :maxlevel . 2)))
      (setq-default org-refile-use-outline-path 'file)
      (setq-default org-outline-path-complete-in-steps nil)
      (setq-default org-refile-allow-creating-parent-nodes 'confirm)
    #+end_src

*** Enable =evil-org=

    #+begin_src emacs-lisp
      (use-package evil-org
        :hook (org-mode . evil-org-mode)
        :config
        (add-hook 'evil-org-mode-hook (lambda () (evil-org-set-key-theme)))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
    #+end_src

*** Presentations with =ox-reveal=

    #+begin_src emacs-lisp
      (use-package ox-reveal
        :commands org-export-dispatch
        :config
        (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0"))
    #+end_src

*** Allow bind keywords for export

    #+begin_src emacs-lisp
      (setq org-export-allow-bind-keywords t)
    #+end_src

** =harvest=

   #+begin_src emacs-lisp
     (use-package reaper
       :commands reaper
       :init
       (setq-default reaper-hours-timer-mode nil)
       (setq reaper-api-key (getenv "HARVEST_API_KEY"))
       (setq reaper-account-id (getenv "HARVEST_ACCOUNT_ID"))
       (leader-def
         "a h" '(reaper :which-key "harvest"))
       :config
       (general-def
         :states '(normal visual)
         :keymaps 'reaper-mode-map
         "q" 'kill-buffer-and-window
         "g r" '(reaper-refresh :which-key "refresh"))
       (major-def
         :keymaps 'reaper-mode-map
         "d" '(reaper-goto-date :which-key "date")
         "s" '(reaper-start-timer :which-key "start timer")
         "S" '(reaper-stop-timer :which-key "stop timer")
         "n" '(reaper-start-new-timer :which-key "new timer")
         "e" '(reaper-edit-entry-time :which-key "edit time")
         "E" '(reaper-edit-entry :which-key "edit entry")
         "x" '(reaper-delete-entry :which-key "delete")))
   #+end_src

* Programming languages and modes

** =undo-fu=

   #+begin_src emacs-lisp
     (use-package undo-fu
       :commands (undo-fu-only-redo undo-fu-only-undo))
   #+end_src

** =html=

   #+begin_src emacs-lisp
     (use-package web-mode
       :mode
       ("\\.html?\\'" . web-mode)
       ("\\.php\\'" . web-mode))

     (use-package emmet-mode
       :hook (sgml-mode css-mode)
       :config
       (general-def
         :definer 'minor-mode
         :states 'insert
         :keymaps 'emmet-mode
         "TAB" 'emmet-expand-line))
   #+end_src

** =css=

   #+begin_src emacs-lisp
     (use-package counsel-css
       :hook (css-mode . counsel-css-imenu-setup))
   #+end_src

** =elm=

   #+begin_src emacs-lisp
     (defun my/elm-outline-mode ()
       "Enables outline mode for Elm files."
       (progn
         (outline-minor-mode)
         (setq outline-regexp "--+\ ")))

     ;; Override function to ignore node_modules
     (defun elm-mode-generate-tags ()
       "Generate a TAGS file for the current project."
       (interactive)
       (when (elm--has-dependency-file)
         (let* ((default-directory (elm--find-dependency-file-path))
                (find-command "find . -type f -name \"*.elm\" -print")
                (exclude-command (if elm-tags-exclude-elm-stuff
                                     (concat find-command " | egrep -v elm-stuff")
                                   find-command))
                (etags-command (concat
                                exclude-command
                                " | egrep -v node_modules"
                                " | etags --language=none --regex=@"
                                (shell-quote-argument elm-tags-regexps)
                                " -")))
           (call-process-shell-command (concat etags-command "&") nil 0))))

     (defun my/elm-import ()
       "Imports a module from prompted string."
       (interactive)
       (let ((statement (read-string "Import statement: " "import ")))
         (save-excursion
           (goto-char (point-min))
           (if (re-search-forward "^import " nil t)
               (beginning-of-line)
             (forward-line 1)
             (insert "\n"))
           (insert (concat statement "\n"))
           (save-buffer))))

     (use-package elm-mode
       :commands elm-mode
       :init
       (setq elm-package-json "elm.json")
       (setq elm-tags-on-save t)
       (setq elm-tags-exclude-elm-stuff t)
       (setq elm-format-on-save t)
       (setq elm-imenu-use-categories nil)
       :config
       (remove-hook 'elm-mode-hook 'elm-indent-mode)
       (add-hook 'elm-mode-hook 'flycheck-mode)
       (add-hook 'elm-mode-hook 'my/elm-outline-mode)
       (add-hook 'elm-mode-hook
                 (lambda () (set (make-local-variable 'company-backends) '(company-dabbrev))))
       (general-def
         :states '(normal visual)
         :keymaps 'elm-mode-map
         "TAB" 'org-cycle
         "<backtab>" 'org-global-cycle
         "M-<up>" 'outline-move-subtree-up
         "M-<down>" 'outline-move-subtree-down
         "g k" '(outline-previous-heading :which-key "previous heading")
         "g j" '(outline-next-heading :which-key "next heading"))
       (major-def
         :keymaps 'elm-mode-map
         "i" '(my/elm-import :which-key "import")
         "e" '(elm-expose-at-point :which-key "expose")
         "d" '(elm-documentation-lookup :which-key "documentation")))

     (use-package flycheck-elm
       :after elm-mode
       :config
       (add-hook 'flycheck-mode-hook 'flycheck-elm-setup))
   #+end_src

** =javascript=

   #+begin_src emacs-lisp
     (use-package js2-mode
       :mode ("\\.js\\'" . js2-mode)
       :config
       (setq js2-mode-show-parse-errors nil)
       (setq js2-mode-show-strict-warnings nil)
       (add-hook 'js2-mode-hook 'flycheck-mode)
       (add-hook 'js2-mode-hook 'js2-imenu-extras-mode))

     (use-package eslint-fix
       :commands eslint-fix
       :init
       (add-hook 'js2-mode-hook
                 (lambda () (add-hook 'flycheck-before-syntax-check-hook 'eslint-fix nil 'local))))

     (use-package nodejs-repl
       :commands nodejs-repl)
   #+end_src

** =json=

   #+begin_src emacs-lisp
     (defun my/json-sort-setup ()
       "Sets JSON sorting before save if requested"
       (interactive)
       (when (y-or-n-p "Enable JSON sorting?")
         (add-hook 'before-save-hook 'my/json-sort-at-point nil 'local)))

     (defun my/json-sort-at-point ()
       "Sort JSON-like structure surrounding the point."
       (interactive)
       (let ((object-begin (nth 1 (syntax-ppss (point)))))
         (when object-begin
           (save-excursion
             (goto-char object-begin)
             (forward-list)
             (json-pretty-print-ordered object-begin (point))
             (indent-region object-begin (point))))))

     (use-package json-mode
       :commands json-mode
       :config
       (setq json-encoding-default-indentation "    ")
       (add-hook 'json-mode-hook 'my/json-sort-setup)
       (major-def
         :keymaps 'json-mode-map
         "p" '(json-mode-show-path :which-key "path")))
   #+end_src

** =nix=

   #+begin_src emacs-lisp
     (use-package nix-mode
       :mode "\\.nix\\'")

     (use-package nixpkgs-fmt
       :hook (nix-mode . nixpkgs-fmt-on-save-mode))
   #+end_src

** =yaml=

   #+begin_src emacs-lisp
     (use-package yaml-mode
       :mode "\\.yaml\\'")
   #+end_src

** =extempore=

   #+begin_src emacs-lisp
     (use-package extempore-mode
       :commands extempore-mode
       :init
       (unless (fboundp 'eldoc-beginning-of-sexp)
         (defalias 'eldoc-beginning-of-sexp 'elisp--beginning-of-sexp)))
   #+end_src

** =go=

   #+begin_src emacs-lisp
     (use-package go-mode
       :commands go-mode
       :config
       (add-hook 'go-mode-hook
                 (lambda () (add-hook 'before-save-hook 'gofmt-before-save nil 'local))))

     (use-package flycheck-golangci-lint
       :hook (go-mode . flycheck-golangci-lint-setup))
   #+end_src

** =lsp=

   #+begin_src emacs-lisp
     (use-package lsp-mode
       :hook
       (elm-mode . lsp-deferred)
       (lsp-mode . lsp-enable-which-key-integration)
       :config
       (setq lsp-headerline-breadcrumb-enable nil)
       (setq lsp-completion-enable nil)
       (setq lsp-completion-show-detail nil)
       (setq lsp-completion-show-kind nil)
       (setq lsp-enable-file-watchers nil)
       (setq lsp-enable-imenu nil)
       (setq lsp-imenu-show-container-name nil)
       (setq lsp-idle-delay 0)
       (setq-default lsp-diagnostics-disabled-modes '(elm-mode)))

     (use-package lsp-ivy
       :commands (lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol))

     (use-package lsp-treemacs
       :commands lsp-treemacs-errors-list
       :config
       (lsp-treemacs-sync-mode t))
   #+end_src

** =smartparens=

   #+begin_src emacs-lisp
     (use-package smartparens
       :hook (prog-mode . smartparens-mode)
       :config
       (require 'smartparens-config))
   #+end_src

** =direnv=

   #+begin_src emacs-lisp
     (use-package envrc
       :hook (prog-mode . envrc-mode))
   #+end_src

** =jenkins=

   #+begin_src emacs-lisp
     (use-package jenkins
       :commands jenkins
       :init
       (leader-def
         "a j" '(jenkins :which-key "jenkins"))
       :config
       (evil-set-initial-state 'jenkins-mode 'motion)
       (evil-set-initial-state 'jenkins-job-view-mode 'motion)
       (evil-set-initial-state 'jenkins-console-output-mode 'motion)
       (general-def
         :states '(motion)
         :keymaps 'jenkins-mode-map
         "g r" 'revert-buffer
         "RET" 'jenkins-enter-job
         "b" 'jenkins--call-build-job-from-main-screen
         "r" 'jenkins--call-rebuild-job-from-main-screen
         "q" 'kill-buffer-and-window)
       (general-def
         :states '(motion)
         :keymaps 'jenkins-job-view-mode-map
         "g r" '(jenkins--refresh-job-from-job-screen :which-key "refresh")
         "RET" 'jenkins--show-console-output-from-job-screen
         "b" 'jenkins--call-build-job-from-job-screen
         "r" 'jenkins--call-rebuild-job-from-job-screen)
       (setq jenkins-url "https://ci.conta.no")
       (setq jenkins-api-token (auth-source-pick-first-password :host "ci.conta.no"))
       (setq jenkins-username "akoppela"))
   #+end_src

** =vterm=

   #+begin_src emacs-lisp
     (defun my/terminal ()
       "Starts terminal using projectile if possible."
       (interactive)
       (if (projectile-project-p)
           (projectile-run-vterm nil)
         (vterm)))

     (defun copy-from-osx ()
       "Copies content of clipboard from MacOS to Emacs"
       (interactive)
       (vterm-insert (shell-command-to-string "pbpaste")))

     (use-package vterm
       :commands vterm
       :init
       (leader-def
         "a t" '(my/terminal :which-key "terminal"))
       :config
       (general-def
         :keymaps 'vterm-mode-map
         [remap xterm-paste] 'copy-from-osx
         [remap yank] 'copy-from-osx
         [remap vterm-yank] 'copy-from-osx)
       (general-def
         :states '(normal visual)
         :keymaps 'vterm-mode-map
         ;; up
         "M-O A" 'evil-previous-line
         ;; down
         "M-O B" 'evil-next-line
         ;; left
         "M-O C" 'evil-backward-char
         ;; right
         "M-O D" 'evil-forward-char)
       (general-def
         :states 'insert
         :keymaps 'vterm-mode-map
         ;; up
         "M-O A" 'vterm-send-up
         ;; down
         "M-O B" 'vterm-send-down
         ;; left
         "M-O C" 'vterm-send-left
         ;; right
         "M-O D" 'vterm-send-right))
   #+end_src

** =csv/tsv=

   #+begin_src emacs-lisp
     (use-package csv-mode
       :commands (csv-mode tsv-mode))
   #+end_src

** =docker=

   #+begin_src emacs-lisp
     (use-package docker
       :commands docker
       :init
       (leader-def
         "a D" '(docker :which-key "docker")))

     (use-package docker-tramp
       :defer t)
   #+end_src

** =vlf=

   Open large files with =vlf=.

   #+begin_src emacs-lisp
     (use-package vlf
       :commands vlf
       :config
       (require 'vlf-setup))
   #+end_src

** =ledger=.

   #+begin_src emacs-lisp
     (defun my/open-ledger ()
       "Opens my ledger."
       (interactive)
       (find-file (expand-file-name "~/Notes/my.ledger")))

     (use-package ledger-mode
       :commands ledger-mode
       :init
       (setq ledger-default-date-format "%Y-%m-%d")
       (setq ledger-report-use-strict t)
       (leader-def
         "a l" '(my/open-ledger :which-key "ledger"))
       :config
       (add-hook 'ledger-mode-hook
                 (lambda () (add-hook 'before-save-hook
                                      (lambda ()
                                        (progn
                                          (ledger-mode-clean-buffer)
                                          (ledger-sort-buffer)))
                                      nil
                                      'local)))
       (major-def
         :keymaps 'ledger-mode-map
         "r" '(ledger-report :which-key "report")
         "a" '(ledger-add-transaction :which-key "add transaction"))
       (general-def
         :states 'normal
         :keymaps 'ledger-report-mode-map
         "e" 'ledger-report-edit-report
         "s" 'ledger-report-save
         "q" 'ledger-report-quit))

     (use-package flycheck-ledger
       :after ledger-mode
       :config
       (add-hook 'ledger-mode-hook 'flycheck-mode))

     (use-package company-ledger
       :after (company ledger-mode)
       :init
       (add-hook 'ledger-mode-hook 'company-mode)
       :config
       (add-to-list 'company-backends 'company-ledger))
   #+end_src

* Communication and connection

** RSS reader

   #+begin_src emacs-lisp
     (use-package elfeed
       :commands elfeed
       :config
       (leader-def
         "a f" 'elfeed)
       (major-def
         :keymaps 'elfeed-search-mode-map
         "u" '(elfeed-update :which-key "update")))

     (use-package elfeed-org
       :after elfeed
       :init
       (setq rmh-elfeed-org-files (list "~/Notes/rss.org"))
       :config
       (elfeed-org))
   #+end_src

** IRC

   #+begin_src emacs-lisp
     (leader-def
       "a i" '(rcirc :which-key "IRC"))

     (major-def
       :keymaps 'rcirc-mode-map
       "j" '(rcirc-cmd-join :which-key "join"))

     (add-hook 'rcirc-mode-hook
               (lambda () (evil-set-initial-state 'rcirc-mode 'normal)))
   #+end_src

** VPN

   #+begin_src emacs-lisp
     (defconst my/vpn-conf (expand-file-name "~/vpn/do.ovpn"))

     (defun my/connect-vpn ()
       "Connects to VPN"
       (interactive)
       (ovpn-mode-start-vpn-conf my/vpn-conf))

     (defun my/disconnect-vpn ()
       "Disconnects from VPN"
       (interactive)
       (ovpn-mode-stop-vpn-conf my/vpn-conf))

     (use-package ovpn-mode
       :commands (ovpn-mode-start-vpn-conf ovpn-mode-start-vpn-conf)
       :init
       (leader-def
         "a v" '(:ignore t :which-key "vpn")
         "a v c" '(my/connect-vpn :which-key "connect")
         "a v d" '(my/disconnect-vpn :which-key "disconnect")))
   #+end_src

** Transmission

   #+begin_src emacs-lisp
     (use-package transmission
       :commands transmission
       :init
       (setq transmission-refresh-modes
             '(transmission-mode
               transmission-files-mode))
       (leader-def
         "a T" '(transmission :which-key "transmission")))
   #+end_src

** Slack

   #+begin_src emacs-lisp
     (use-package slack
       :commands slack-start
       :init
       (setq slack-request-timeout 120)
       (setq slack-enable-global-mode-string t)
       (setq slack-buffer-emojify t)
       (leader-def
         "a s" '(:ignore t :which-key "slack")
         "a s s" '(slack-start :which-key "start")
         "a s c" '(slack-channel-select :which-key "channel")
         "a s m" '(slack-im-select :which-key "message")
         "a s r" '(slack-select-rooms :which-key "room")
         "a s R" '(slack-select-unread-rooms :which-key "unread room")
         "a s f" '(slack-upload-file :which-key "upload file")
         "a s t" '(slack-all-threads :which-key "threads"))
       :config
       (general-def
         :states '(normal visual)
         :keymaps
         '(slack-mode-map
           slack-all-threads-buffer-mode-map
           slack-file-info-buffer-mode-map)
         "q" 'kill-buffer-and-window)
       (major-def
         :keymaps 'slack-message-buffer-mode-map
         "e" '(slack-message-edit :which-key "edit"))
       (slack-register-team
        :name "Conta"
        :default t
        :token (auth-source-pick-first-password
                :host "conta.slack.com"
                :user "akoppela@gmail.com")
        :visible-threads t
        :modeline-enabled t))
   #+end_src

* Help

** =which-key= shows all available keybindings in a popup

   #+begin_src emacs-lisp
     (use-package which-key
       :defer 2
       :config
       (which-key-mode))
   #+end_src

** =helpful= provides *Help* buffer on steroids

   #+begin_src emacs-lisp
     (use-package helpful
       :commands
       (helpful-symbol
        helpful-key
        helpful-at-point
        helpful-callable
        helpful-variable)
       :init
       (leader-def
         "h s" '(helpful-symbol :which-key "describe symbol")
         "h k" '(helpful-key :which-key "describe key")
         "h p" '(helpful-at-point :which-key "at point"))
       :config
       (setq counsel-describe-function-function 'helpful-callable)
       (setq counsel-describe-variable-function 'helpful-variable)
       (general-def
         :states '(normal visual)
         :keymaps 'helpful-mode-map
         "q" 'kill-buffer-and-window))
   #+end_src

** Select help window when open

   #+begin_src emacs-lisp
     (setq help-window-select t)
   #+end_src

** Display =apropos= buffer in same window

   #+begin_src emacs-lisp
     (add-to-list 'display-buffer-alist
                  '("*Apropos*" display-buffer-same-window))
   #+end_src

** =dash= documentation

   #+begin_src emacs-lisp
     (use-package counsel-dash
       :commands counsel-dash
       :init
       (leader-def
         "a d" '(counsel-dash :which-key "dash"))
       :config
       (setq counsel-dash-common-docsets '("JavaScript" "Lo-Dash")))
   #+end_src

** Thesaurus synonyms/antonyms

   #+begin_src emacs-lisp
     (use-package synosaurus
       :commands synosaurus-lookup)
   #+end_src

* The End!
