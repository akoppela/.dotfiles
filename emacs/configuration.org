#+title: Emacs Configuration
#+author: Andrey Koppel (akoppela)
#+email: akoppela@gmail.com

* Personal info.

  #+begin_src emacs-lisp
    (setq user-full-name "Andrey Koppel")
    (setq user-mail-address "akoppela@gmail.com")
  #+end_src

* Package management.

** Prefer to load newer version of files.

   #+begin_src emacs-lisp
     (setq load-prefer-newer t)
   #+end_src

** Initialize =package.el= and include Org, Gnu and Melpa package archives.

   #+begin_src emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)
     (setq package-archives '(("org" . "https://orgmode.org/elpa/")
                              ("gnu" . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")))
     (package-initialize)
   #+end_src

** Make sure =quelpa= is installed.

   #+begin_src emacs-lisp
     (unless (package-installed-p 'quelpa)
       (with-temp-buffer
         (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
         (eval-buffer)
         (quelpa-self-upgrade)))
   #+end_src

** Do not install packages from Melpa with =quelpa=.

   #+begin_src emacs-lisp
     (setq quelpa-checkout-melpa-p nil)
   #+end_src

** Initialize =quelpa-use-package=.

   #+begin_src emacs-lisp
     (quelpa
      '(quelpa-use-package
        :fetcher git
        :url "https://github.com/quelpa/quelpa-use-package.git"))
     (require 'quelpa-use-package)
   #+end_src

** Make sure packages are always installed.

   #+begin_src emacs-lisp
     (setq use-package-always-ensure t)
   #+end_src

** Install packages with =quelpa= if requested.

   #+begin_src emacs-lisp
     (quelpa-use-package-activate-advice)
   #+end_src

** Benchmark emacs initialization.

   #+begin_src emacs-lisp
     (use-package benchmark-init
       :config
       (add-hook 'after-init-hook 'benchmark-init/deactivate))
   #+end_src

** Always compile packages.

   #+begin_src emacs-lisp
     (use-package auto-compile
       :config
       (auto-compile-on-load-mode 1)
       (auto-compile-on-save-mode 1))
   #+end_src

* Defaults.

** Setup encoding to UTF-8.

   #+begin_src emacs-lisp
     (setq coding-system-for-read 'utf-8)
     (setq coding-system-for-write 'utf-8)
   #+end_src

** Start with users home directory by default.

   #+begin_src emacs-lisp
     (setq default-directory "~/")
   #+end_src

** Increase garbage collection threshold.

   This means GC runs less often, which speeds up some operations.

   #+begin_src emacs-lisp
     (use-package gcmh
       :config
       (gcmh-mode 1))
   #+end_src

** Increase read process output.

   #+begin_src emacs-lisp
     (setq read-process-output-max (* 1024 1024 5))
   #+end_src

** Delete trailing whitespace everytime buffer is saved.

   #+begin_src emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src

** Always follow symlinks when opening a file.

   #+begin_src emacs-lisp
     (setq vc-follow-symlinks t)
   #+end_src

** Make sure sentenses does not have two spaces after periods.

   #+begin_src emacs-lisp
     (setq sentense-end-double-space nil)
   #+end_src

** Ask before closing Emacs.

   #+begin_src emacs-lisp
     (setq confirm-kill-emacs 'y-or-n-p)
   #+end_src

** Set backup files directory.

   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+end_src

** Set auto save files directory.

   #+begin_src emacs-lisp
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+end_src

** Shorten yes/no answers.

   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

** Open large files with =vlf=.

   #+begin_src emacs-lisp
     (use-package vlf
       :commands vlf
       :config
       (require 'vlf-setup))
   #+end_src

** Do not add newline at the end of a file.

   #+begin_src emacs-lisp
     (setq require-final-newline nil)
     (setq mode-require-final-newline nil)
   #+end_src

** Set =Firefox= as default browser.

   #+begin_src emacs-lisp
     (setq browse-url-browser-function 'browse-url-firefox)
     (setq browse-url-firefox-new-window-is-tab t)
   #+end_src

** Make session persistent.

   #+begin_src emacs-lisp
     (use-package session
       :config
       (setq session-save-file (expand-file-name ".session" user-emacs-directory))
       (setq session-save-file-coding-system 'utf-8)
       (add-hook 'after-init-hook 'session-initialize))
   #+end_src

** Revert TAGS file without asking.

   #+begin_src emacs-lisp
     (setq tags-revert-without-query t)
   #+end_src

** Load =dash=.

   #+begin_src emacs-lisp
     (use-package dash)
   #+end_src

** Truncate eshell buffer.

   #+begin_src emacs-lisp
     (add-hook 'eshell-output-filter-functions 'eshell-truncate-buffer)
   #+end_src

** Automatically rescan =imenu=.

   #+begin_src emacs-lisp
     (setq imenu-auto-rescan t)
   #+end_src

** Startup profiler.

   #+begin_src emacs-lisp
     (use-package esup
       :commands esup)
   #+end_src

** Do not lock files.

   #+begin_src emacs-lisp
     (setq create-lockfiles nil)
   #+end_src

** Add custom file.

   #+begin_src emacs-lisp
     (setq custom-file "/dev/null")
   #+end_src

** Copy/paste for MacOS.

   #+begin_src emacs-lisp
     (defun copy-from-osx ()
       "Copies content of clipboard from MacOS to Emacs"
       (shell-command-to-string "pbpaste"))

     (defun paste-to-osx (text &optional push)
       "Copies content of clipboard from Emacs to MacOS"
       (let ((process-connection-type nil))
         (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
           (process-send-string proc text)
           (process-send-eof proc))))

     (setq interprogram-cut-function 'paste-to-osx)
     (setq interprogram-paste-function 'copy-from-osx)
   #+end_src

* Keybindings.

** =evil-fu= for redo.

   #+begin_src emacs-lisp
     (use-package undo-fu
       :commands (undo-fu-only-redo undo-fu-only-undo))
   #+end_src

** =evil= provides =vi= keybindings.

*** Initialize =evil=.

    #+begin_src emacs-lisp
      (use-package evil
        :init
        (setq evil-want-C-i-jump nil)
        (setq evil-want-integration t)
        (setq evil-want-keybinding nil)
        (setq evil-undo-system 'undo-fu) ;; TODO: Change to native undo-redo from Emacs 28
        :config
        (evil-mode 1))
    #+end_src

*** Enable =evil-collection=.

    #+begin_src emacs-lisp
      (use-package evil-collection
        :after evil
        :init
        (setq evil-collection-setup-minibuffer t)
        (setq evil-collection-outline-bind-tab-p nil)
        (setq evil-collection-company-use-tng nil)
        :config
        (evil-collection-init))
    #+end_src

*** Enable =evil-surround=.

    #+begin_src emacs-lisp
      (use-package evil-surround
        :after evil-collection
        :config
        (global-evil-surround-mode 1))
    #+end_src

*** Enable =evil-commentary=.

    #+begin_src emacs-lisp
      (use-package evil-commentary
        :after evil-collection
        :config
        (evil-commentary-mode 1))
    #+end_src

*** Define default normal states.

    #+begin_src emacs-lisp
      (evil-set-initial-state 'rcirc-mode 'normal)
    #+end_src

** =hydra=.

   #+begin_src emacs-lisp
     (use-package hydra)
   #+end_src

** =general= makes it easier to assign keybindings.

*** Initialize.

    #+begin_src emacs-lisp
      (use-package general
        :config
        (general-create-definer leader-def
          :states '(normal visual insert motion emacs)
          :keymaps 'override
          :prefix "SPC"
          :non-normal-prefix "M-SPC")
        (general-create-definer major-def
          :states '(normal visual insert motion emacs)
          :keymaps 'override
          :prefix ","
          :non-normal-prefix "M-,"))
    #+end_src

*** Main menu.

**** Helper functions.

     #+begin_src emacs-lisp
       (defun my/counsel-projectile-rg ()
         "Calls counsel-projectile-rg with no initial input"
         (interactive)
         (progn
           (setq counsel-projectile-rg-initial-input nil)
           (counsel-projectile-rg)))

       (defun my/counsel-projectile-rg-at-point ()
         "Calls counsel-projectile-rg with ivy-at-point"
         (interactive)
         (progn
           (setq counsel-projectile-rg-initial-input (ivy-thing-at-point))
           (counsel-projectile-rg)))
     #+end_src

**** Keybindings.

     #+begin_src emacs-lisp
       (leader-def
         "" nil
         "SPC" '(counsel-M-x :which-key "M-x")
         "u" '(universal-argument :which-key "universal argument")
         "/" '(my/counsel-projectile-rg :which-key "find in project")
         "*" '(my/counsel-projectile-rg-at-point :which-key "find in project at point"))
     #+end_src
*** Buffer.

    #+begin_src emacs-lisp
      (leader-def
        "b" '(:ignore t :which-key "buffer")
        "b b" '(ivy-switch-buffer :which-key "switch")
        "b l" '(ibuffer :which-key "list")
        "b d" '(kill-current-buffer :which-key "delete")
        "b x" '(kill-buffer-and-window :which-key "delete with window")
        "b s" '(save-some-buffers :which-key "save")
        "b e" '(eval-buffer :which-key "eval")
        "b r" '(rename-buffer :which-key "rename")
        "b R" '(revert-buffer :which-key "revert"))

      (general-def
        :states '(normal visual)
        :keymaps 'ibuffer-mode-map
        "q" 'kill-buffer-and-window)
    #+end_src

*** Window.

**** Helper functions.

***** Resize hydra.

      #+begin_src emacs-lisp
        (defhydra hydra-window-resize ()
          "Resize window"
          ("[" shrink-window-horizontally "shrink horizontally")
          ("]" enlarge-window-horizontally "enlarge horizontally")
          ("{" shrink-window "shrink vertically")
          ("}" enlarge-window "enlarge vertically"))
      #+end_src

***** Toggle split from horizontal to vertical and vice versa.

      #+begin_src emacs-lisp
        (defun my/split-window-toggle ()
          "Toggles window split from horizontal to vertical and vice versa."
          (interactive)
          (if (= (count-windows) 2)
              (let* ((this-win-buffer (window-buffer))
                     (next-win-buffer (window-buffer (next-window)))
                     (this-win-edges (window-edges (selected-window)))
                     (next-win-edges (window-edges (next-window)))
                     (this-win-2nd (not (and (<= (car this-win-edges)
                                                 (car next-win-edges))
                                             (<= (cadr this-win-edges)
                                                 (cadr next-win-edges)))))
                     (splitter
                      (if (= (car this-win-edges)
                             (car (window-edges (next-window))))
                          'split-window-horizontally
                        'split-window-vertically)))
                (delete-other-windows)
                (let ((first-win (selected-window)))
                  (funcall splitter)
                  (if this-win-2nd (other-window 1))
                  (set-window-buffer (selected-window) this-win-buffer)
                  (set-window-buffer (next-window) next-win-buffer)
                  (select-window first-win)
                  (if this-win-2nd (other-window 1))))))
      #+end_src

**** Keybindings.

     #+begin_src emacs-lisp
       (leader-def
         "w" '(:ignore t :which-key "window")
         "w TAB" '(other-window :which-key "next")
         "w d" '(delete-window :which-key "delete")
         "w D" '(delete-other-windows :which-key "delete other")
         "w r" '(hydra-window-resize/body :which-key "resize")
         "w a" '(ace-window :which-key "ace")

         "w s" '(:ignore t :which-key "split")
         "w s h" '(split-window-below :which-key "horizontally")
         "w s v" '(split-window-right :which-key "vertically")
         "w s t" '(my/split-window-toggle :which-key "toggle"))
     #+end_src

*** Theme.

**** Helper functions.

***** Change theme.

      #+begin_src emacs-lisp
        (defvar my/change-theme-hook nil
          "Hooks to run after theme is changed.")

        (defmacro my/change-theme (fun-name fun-description themes get-new-theme get-rest-themes sort-themes)
          "Changes theme based on given data"
          `(defun ,fun-name ()
             ,fun-description
             (interactive)
             (let* ((new-theme (,get-new-theme ,themes))
                    (rest-themes (,get-rest-themes ,themes))
                    (new-available-themes (funcall (,sort-themes 'append) rest-themes (list new-theme))))
               (progn
                 (setq ,themes new-available-themes)
                 (if (eq new-theme my/current-theme)
                     (,fun-name)
                   (progn
                     (setq my/current-theme new-theme)
                     (mapcar 'disable-theme custom-enabled-themes)
                     (font-lock-mode)
                     (load-theme new-theme t)
                     (run-hooks 'my/change-theme-hook)
                     (font-lock-mode)))))))
      #+end_src

***** Next theme.

      #+begin_src emacs-lisp
        (my/change-theme my/next-theme "Changes theme to next one" my/themes car cdr identity)
      #+end_src

***** Previous theme.

      #+begin_src emacs-lisp
        (my/change-theme my/previous-theme "Changes theme to previous one" my/themes -last-item butlast -flip)
      #+end_src

***** Theme hydra.

      #+begin_src emacs-lisp
        (defhydra hydra-change-theme ()
          "Change theme"
          ("n" my/next-theme "next")
          ("N" my/previous-theme "previous"))
      #+end_src

**** Keybindings.

     #+begin_src emacs-lisp
       (leader-def
         "t" '(hydra-change-theme/body :which-key "theme"))
     #+end_src

*** File.

**** Helper functions.

     #+begin_src emacs-lisp
       (defun my/delete-file-and-buffer ()
         "Kill the current buffer and delete the file it's visiting."
         (interactive)
         (let ((filename (buffer-file-name)))
           (if filename
               (if (vc-backend filename)
                   (vc-delete-file filename)
                 (progn (delete-file filename)
                        (message "Deleted file %s." filename)
                        (kill-buffer)))
             (message "Can't delete file."))))
     #+end_src

**** Bindings.

     #+begin_src emacs-lisp
       (leader-def
         "f" '(:ignore t :which-key "file")
         "f f" '(counsel-find-file :which-key "find")
         "f s" '(save-buffer :which-key "save")
         "f r" '(rename-file :which-key "rename")
         "f d" '(my/delete-file-and-buffer :which-key "delete")
         "f c" '(copy-file :which-key "copy")

         "f e" '(:ignore t :which-key "emacs")
         "f e c" '(my/open-configuration :which-key "configuration")
         "f e r" '(my/load-configuration :which-key "reload configuration"))
     #+end_src

*** Project.

    #+begin_src emacs-lisp
      (leader-def
        "p" '(:ignore t :which-key "project")
        "p f" '(counsel-projectile-find-file :which-key "find file")
        "p p" '(counsel-projectile-switch-project :which-key "switch")
        "p b" '(counsel-projectile-switch-to-buffer :which-key "buffer")
        "p t" '(treemacs :which-key "treemacs"))
    #+end_src

*** Application.

    #+begin_src emacs-lisp
      (leader-def
        "a" '(:ignore t :which-key "application")
        "a i" '(rcirc :which-key "IRC"))
    #+end_src

*** Search.

    #+begin_src emacs-lisp
      (leader-def
        "s" '(:ignore t :which-key "search")
        "s s" '(swiper-isearch :which-key "buffer")
        "s S" '(swiper-isearch-thing-at-point :which-key "buffer with thing at point")
        "s b" '(eww-search-words :which-key "browser")
        "s i" '(counsel-imenu :which-key "imenu"))
    #+end_src

*** Error.

    #+begin_src emacs-lisp
      (leader-def
        "e" '(:ignore t :which-key "error")
        "e v" '(flycheck-verify-setup :which-key "verify setup")
        "e n" '(flycheck-next-error :which-key "next")
        "e N" '(flycheck-previous-error :which-key "previous")
        "e l" '(flycheck-list-errors :which-key "list")
        "e w" '(flyspell-auto-correct-word :which-key "auto correct word"))
    #+end_src

*** Git.

    #+begin_src emacs-lisp
      (leader-def
        "g" '(:ignore t :which-key "git")
        "g s" '(magit-status :which-key "status")
        "g b" '(magit-blame-addition :which-key "blame")
        "g c" '(magit-clone :which-key "clone")
        "g h" '(magit-log-buffer-file :which-key "history"))
    #+end_src

*** Narrow.

    #+begin_src emacs-lisp
      (leader-def
        "n" '(:ignore t :which-key "narrow")
        "n f" '(narrow-to-defun :which-key "function")
        "n r" '(narrow-to-region :which-key "region")
        "n p" '(narrow-to-page :which-key "page")
        "n w" '(widen :which-key "widen"))

      (leader-def
        :keymaps '(org-mode-map outline-minor-mode-map)
        "n s" '(org-narrow-to-subtree :which-key "subtree"))
    #+end_src

*** Jump.

    #+begin_src emacs-lisp
      (leader-def
        "j" '(:ignore t :which-key "jump")
        "j s" '(avy-goto-subword-1 :which-key "subword")
        "j w" '(avy-goto-word-1 :which-key "word"))
    #+end_src

*** Help.

    #+begin_src emacs-lisp
      (leader-def
        "h" '(:ignore t :which-key "help")
        "h a" '(counsel-apropos :which-key "apropos")
        "h p" '(helpful-at-point :which-key "at point")
        "h P" '(describe-package :which-key "package")
        "h f" '(counsel-describe-function :which-key "describe function")
        "h v" '(counsel-describe-variable :which-key "describe variable")
        "h s" '(helpful-symbol :which-key "describe symbol")
        "h k" '(helpful-key :which-key "describe key")
        "h m" '(describe-mode :which-key "describe mode")
        "h i" '(info :which-key "info")
        "h b" '(benchmark-init/show-durations-tabulated :which-key "benchmark emacs initialization"))
    #+end_src

*** Quit.

    #+begin_src emacs-lisp
      (leader-def
        "q" '(:ignore t :which-key "quit")
        "q q" '(save-buffers-kill-terminal :which-key "client")
        "q Q" '(save-buffers-kill-emacs :which-key "server"))
    #+end_src

* Appearance.

** Hide default Emacs screen.

   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
   #+end_src

** Load custom theme.

   #+begin_src emacs-lisp
     (use-package color-theme-sanityinc-tomorrow
       :quelpa
       (color-theme-sanityinc-tomorrow
        :fetcher git
        :url "https://github.com/akoppela/color-theme-sanityinc-tomorrow.git")
       :config
       (load-theme 'sanityinc-tomorrow-akoppela t))
   #+end_src

** Enable Doom theme.

   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t)
       (setq doom-themes-enable-italic t)

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)

       ;; Use the colorful treemacs theme
       (setq doom-themes-treemacs-theme "doom-colors")
       (doom-themes-treemacs-config)

       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config))
   #+end_src

** =mode-line= specific.

*** Enable custom modeline.

    #+begin_src emacs-lisp
      (use-package doom-modeline
        :init (doom-modeline-mode 1))
    #+end_src

*** Show full names for evil state.

    #+begin_src emacs-lisp
      (setq evil-normal-state-tag "N")
      (setq evil-insert-state-tag "I")
      (setq evil-visual-state-tag "V")
      (setq evil-replace-state-tag "R")
      (setq evil-operator-state-tag "O")
      (setq evil-motion-state-tag "M")
      (setq evil-emacs-state-tag "E")
    #+end_src

*** Show match info.

    #+begin_src emacs-lisp
      (use-package anzu
        :config
        (setq anzu-cons-mode-line-p nil)
        (global-anzu-mode 1))

      (use-package evil-anzu
        :after (evil-collection anzu))
    #+end_src

** Hide menu, tool and scroll bars.

   #+begin_src emacs-lisp
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
     (menu-bar-mode (if (display-graphic-p) 1 0))
   #+end_src

** Enable current line highlighting.

   #+begin_src emacs-lisp
     (global-hl-line-mode 1)
   #+end_src

** Turn on syntax highlighting whenever possible.

   #+begin_src emacs-lisp
     (global-font-lock-mode 1)
   #+end_src

** Visually indicate matching parentheses.

   #+begin_src emacs-lisp
     (show-paren-mode 1)
     (setq show-paren-delay 0.0)
   #+end_src

** Flash screen on invalid operation.

   #+begin_src emacs-lisp
     (setq visible-bell t)
   #+end_src

** Display visual line numbers.

   Visual lines are relative screen lines.

   #+begin_src emacs-lisp
     (global-display-line-numbers-mode)
     (setq display-line-numbers-type 'visual)
     (setq display-line-numbers-width-start t)
   #+end_src

** Always indent with spaces

   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src

** Use 4 spaces for tabs.

   #+begin_src emacs-lisp
     (setq-default tab-width 4)
   #+end_src

** Smooth scroll.

   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src

** Center cursor vertically.

   #+begin_src emacs-lisp
     (use-package centered-cursor-mode
       :commands centered-cursor-mode
       :init
       (add-hook 'prog-mode-hook 'centered-cursor-mode)
       (add-hook 'org-mode-hook 'centered-cursor-mode))
   #+end_src

** Buffer list grouping.

   #+begin_src emacs-lisp
     (use-package ibuffer-vc
       :commands ibuffer-vc-set-filter-groups-by-vc-root
       :init
       (add-hook 'ibuffer-hook
                 (lambda ()
                   (ibuffer-vc-set-filter-groups-by-vc-root)
                   (ibuffer-do-sort-by-recency)))
       :config
       (setq ibuffer-formats
             '((mark modified read-only locked vc-status-mini
                     " "
                     (name 18 18 :left :elide)
                     " "
                     (size 9 -1 :right)
                     " "
                     (mode 16 16 :left :elide)
                     " "
                     vc-relative-file))))
   #+end_src

** Add color background for hexadecimal strings.

   #+begin_src emacs-lisp
     (use-package rainbow-mode
       :commands rainbow-mode
       :init
       (add-hook 'prog-mode-hook 'rainbow-mode))
   #+end_src

** Enable smart expand region.

   #+begin_src emacs-lisp
     (use-package expand-region
       :after general
       :commands er/expand-region
       :init
       (leader-def
         "v" '(er/expand-region :which-key "expand region")))
   #+end_src

** Enable notifications.

   #+begin_src emacs-lisp
     (use-package alert
       :commands (alert)
       :init
       (setq alert-default-style 'osx-notifier))
   #+end_src

** Show visual indicator for column rule.

   #+begin_src emacs-lisp
     (setq-default display-fill-column-indicator-column 80)
     (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
   #+end_src

* Navigation, search and completion.

** =counsel= completion framework.

   #+begin_src emacs-lisp
     (use-package counsel
       :init
       (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
       (setq counsel-rg-base-command '("rg" "-M" "240" "--hidden" "--with-filename" "--no-heading" "--line-number" "--color" "never" "%s"))
       :config
       (ivy-mode 1)
       (major-def
         :keymaps 'ivy-minibuffer-map
         "o" '(ivy-occur :which-key "occur")
         "a" '(ivy-read-action :which-key "action")))
   #+end_src

** =wgrep= to edit search.

   #+begin_src emacs-lisp
     (use-package wgrep
       :commands ivy-wgrep-change-to-wgrep-mode)
   #+end_src

** =treemacs= file explorer.

   #+begin_src emacs-lisp
     (use-package treemacs
       :commands treemacs)

     (use-package treemacs-evil
       :after (treemacs evil-collection))

     (use-package treemacs-projectile
       :after (treemacs projectile))
   #+end_src

** =iedit= to edit multiple regions simultaneously.

   #+begin_src emacs-lisp
     (use-package iedit
       :commands iedit-mode)
   #+end_src

** =company= enables auto-completion.

   #+begin_src emacs-lisp
     (defun my/company-complete-common-or-cycle-backward ()
       "Complete common prefix or cycle backward."
       (interactive)
       (company-complete-common-or-cycle -1))

     (use-package company
       :commands company-mode
       :init
       (setq company-idle-delay 0)
       (setq company-require-match nil)
       (setq company-minimum-prefix-length 1)
       (setq company-dabbrev-downcase nil)
       (setq company-dabbrev-ignore-case nil)
       (add-hook 'prog-mode-hook 'company-mode)
       :config
       (general-def
         :keymaps 'company-active-map
         "TAB" 'company-complete-common-or-cycle
         "<backtab>" 'my/company-complete-common-or-cycle-backward))
   #+end_src

** =flycheck= checks syntax.

   #+begin_src emacs-lisp
     (use-package flycheck
       :config
       (setq flycheck-check-syntax-automatically '(mode-enabled save)))
   #+end_src

** =flyspell= checks spelling.

   #+begin_src emacs-lisp
     (use-package flyspell
       :commands flyspell-mode
       :init
       (add-hook 'text-mode-hook 'flyspell-mode)
       (add-hook 'prog-mode-hook 'flyspell-prog-mode)
       (add-hook 'org-mode-hook 'flyspell-mode)
       (add-hook 'git-commit-mode-hook 'flyspell-mode))
   #+end_src

* Project, time and task management.

** =projectile=.

   #+begin_src emacs-lisp
     (use-package projectile
       :config
       (projectile-mode 1)
       (setq projectile-completion-system 'ivy))

     (use-package counsel-projectile
       :after (projectile counsel)
       :config
       (counsel-projectile-mode 1))
   #+end_src

** =magit= for Git related stuff.

*** Initialization.

    #+begin_src emacs-lisp
      (use-package magit
        :commands magit
        :init
        (setq magit-blame-styles
              '((margin
                 (margin-format " %a - %s%f" " %C" " %H")
                 (margin-width . 42)
                 (margin-face . magit-blame-margin)
                 (margin-body-face magit-blame-dimmed)))))
    #+end_src

** =org-mode=.

*** Keybindings.

    #+begin_src emacs-lisp
      (defun my/open-notes ()
        "Opens my notes."
        (interactive)
        (find-file (expand-file-name "~/Notes/notes.org")))

      (leader-def
        "a n" '(my/open-notes :which-key "notes"))

      (major-def
        :keymaps 'org-mode-map
        "'" '(org-edit-special :which-key "src editor")
        "e" '(org-export-dispatch :which-key "export")
        "a" '(org-agenda :which-key "agenda")
        "t" '(org-insert-structure-template :which-key "template")

        "d" '(:ignore t :which-key "date")
        "d s" '(org-schedule :which-key "schedule")

        "s" '(:ignore t :which-key "subtree")
        "s r" '(org-refile :which-key "refile"))
    #+end_src

*** Show bullets instead of stars.

    #+begin_src emacs-lisp
      (use-package org-bullets
        :after org
        :commands org-bullets-mode
        :init
        (add-hook 'org-mode-hook 'org-bullets-mode))
    #+end_src

*** Hide leading stars.

    #+begin_src emacs-lisp
      (defun my/set-org-hide-face ()
        "Sets org-hide face based on current theme"
        (interactive)
        (face-spec-set 'org-hide
                       `((t :foreground
                            ,(symbol-value (intern (format "%s-base00" my/current-theme)))))))

      (setq org-hide-leading-stars t)
      (add-hook 'my/change-theme-hook 'my/set-org-hide-face)
    #+end_src

*** Change collapsed subtree symbol.

    #+begin_src emacs-lisp
      (setq org-ellipsis " ↴")
    #+end_src

*** Make TAB act natively for code blocks.

    #+begin_src emacs-lisp
      (setq org-src-tab-acts-natively t)
    #+end_src

*** Custom TODO keywords.

    #+begin_src emacs-lisp
      (defun my/set-org-todo-keyword-faces ()
        "Sets org todo keyword faces based on current theme"
        (interactive)
        (setq org-todo-keyword-faces
              `(("TODO" . (:background
                           ,(symbol-value (intern (format "%s-base01" my/current-theme)))
                           :foreground
                           ,(symbol-value (intern (format "%s-base08" my/current-theme)))
                           :weight
                           bold))
                ("PROG" . (:background
                           ,(symbol-value (intern (format "%s-base01" my/current-theme)))
                           :foreground
                           ,(symbol-value (intern (format "%s-base0D" my/current-theme)))
                           :weight
                           bold))
                ("DONE" . (:background
                           ,(symbol-value (intern (format "%s-base01" my/current-theme)))
                           :foreground
                           ,(symbol-value (intern (format "%s-base0B" my/current-theme)))
                           :weight
                           bold)))))

      (setq org-todo-keywords '((sequence "TODO" "PROG" "|" "DONE")))
      (setq org-log-done t)
      (add-hook 'my/change-theme-hook 'my/set-org-todo-keyword-faces)
    #+end_src

*** Agenda files.

    #+begin_src emacs-lisp
      (setq org-agenda-files (list "~/Notes/notes.org"))
    #+end_src

*** Better =org-refile=.

    #+begin_src emacs-lisp
      (setq org-refile-targets '((org-agenda-files :maxlevel . 2) (my/configuration-path :maxlevel . 2)))
      (setq org-refile-use-outline-path 'file)
      (setq org-outline-path-complete-in-steps nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
    #+end_src

*** Enable =evil-org=.

    #+begin_src emacs-lisp
      (use-package evil-org
        :after (evil-collection org)
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook (lambda () (evil-org-set-key-theme)))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
    #+end_src

*** Presentations with =ox-reveal=.

    #+begin_src emacs-lisp
      (use-package ox-reveal
        :config
        (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0"))
    #+end_src

*** Allow bind keywords for export.

    #+begin_src emacs-lisp
      (setq org-export-allow-bind-keywords t)
    #+end_src

** =harvest=.

*** Initialize.

    #+begin_src emacs-lisp
      (use-package reaper
        :commands reaper
        :init
        (setq reaper-hours-timer-mode nil)
        (setq reaper-api-key (getenv "HARVEST_API_KEY"))
        (setq reaper-account-id (getenv "HARVEST_ACCOUNT_ID")))
    #+end_src

*** Keybindings.

    #+begin_src emacs-lisp
      (leader-def
        "a h" '(reaper :which-key "harvest"))

      (general-def
        :states '(normal visual)
        :keymaps 'reaper-mode-map
        "q" 'kill-buffer-and-window
        "g r" '(reaper-refresh :which-key "refresh"))

      (major-def
        :keymaps 'reaper-mode-map
        "d" '(reaper-goto-date :which-key "date")
        "s" '(reaper-start-timer :which-key "start timer")
        "S" '(reaper-stop-timer :which-key "stop timer")
        "n" '(reaper-start-new-timer :which-key "new timer")
        "e" '(reaper-edit-entry-time :which-key "edit time")
        "E" '(reaper-edit-entry :which-key "edit entry")
        "x" '(reaper-delete-entry :which-key "delete"))
    #+end_src

* Programming languages and modes.

** =html=.

   #+begin_src emacs-lisp
     (use-package web-mode
       :mode
       ("\\.html?\\'" . web-mode)
       ("\\.php\\'" . web-mode))

     (use-package emmet-mode
       :commands emmet-mode
       :init
       (add-hook 'sgml-mode-hook 'emmet-mode)
       (add-hook 'css-mode-hook 'emmet-mode)
       :config
       (emmet-preview-mode 0)
       (general-def
         :definer 'minor-mode
         :states 'insert
         :keymaps 'emmet-mode
         "TAB" 'emmet-expand-line))
   #+end_src

** =elm=.

*** Helper functions.

    #+begin_src emacs-lisp
      (defun my/elm-outline-mode ()
        "Enables outline mode for Elm files."
        (progn
          (outline-minor-mode)
          (setq outline-regexp "--+\ ")))

      (defun elm-mode-generate-tags ()
        "Generate a TAGS file for the current project."
        (interactive)
        (when (elm--has-dependency-file)
          (let* ((default-directory (elm--find-dependency-file-path))
                 (find-command "find . -type f -name \"*.elm\" -print")
                 (exclude-command (if elm-tags-exclude-elm-stuff
                                      (concat find-command " | egrep -v elm-stuff")
                                    find-command))
                 (etags-command (concat
                                 exclude-command
                                 " | egrep -v node_modules"
                                 " | etags --language=none --regex=@"
                                 (shell-quote-argument elm-tags-regexps)
                                 " -")))
            (call-process-shell-command (concat etags-command "&") nil 0))))

      (defun my/elm-import ()
        "Imports a module from prompted string."
        (interactive)
        (let ((statement (read-string "Import statement: " "import ")))
          (save-excursion
            (goto-char (point-min))
            (if (re-search-forward "^import " nil t)
                (beginning-of-line)
              (forward-line 1)
              (insert "\n"))
            (insert (concat statement "\n"))
            (save-buffer))))
    #+end_src

*** Initialization.

    #+begin_src emacs-lisp
      (use-package elm-mode
        :commands elm-mode
        :init
        (setq elm-package-json "elm.json")
        (setq elm-tags-on-save t)
        (setq elm-tags-exclude-elm-stuff t)
        (setq elm-format-on-save t)
        (setq elm-imenu-use-categories nil)
        :config
        (remove-hook 'elm-mode-hook 'elm-indent-mode)
        (add-hook 'elm-mode-hook 'flycheck-mode)
        (add-hook 'elm-mode-hook 'my/elm-outline-mode)
        (add-hook 'elm-mode-hook
                  (lambda () (set (make-local-variable 'company-backends) '(company-dabbrev)))))

      (use-package flycheck-elm
        :after (flycheck elm-mode)
        :config
        (add-hook 'flycheck-mode-hook 'flycheck-elm-setup))
    #+end_src

*** Keybindings.

    #+begin_src emacs-lisp
      (general-def
        :states '(normal visual)
        :keymaps 'elm-mode-map
        "TAB" 'org-cycle
        "<backtab>" 'org-global-cycle
        "M-<up>" 'outline-move-subtree-up
        "M-<down>" 'outline-move-subtree-down
        "g k" '(outline-previous-heading :which-key "previous heading")
        "g j" '(outline-next-heading :which-key "next heading"))

      (major-def
        :keymaps 'elm-mode-map
        "i" '(my/elm-import :which-key "import")
        "e" '(elm-expose-at-point :which-key "expose")
        "d" '(elm-documentation-lookup :which-key "documentation"))
    #+end_src

** =javascript=.

*** Initialization.

    #+begin_src emacs-lisp
      (use-package js2-mode
        :mode ("\\.js\\'" . js2-mode)
        :config
        (setq js2-mode-show-parse-errors nil)
        (setq js2-mode-show-strict-warnings nil)
        (add-hook 'js2-mode-hook 'flycheck-mode)
        (add-hook 'js2-mode-hook 'js2-imenu-extras-mode))
    #+end_src

*** Run =eslint fix= on file save.

    #+begin_src emacs-lisp
      (use-package eslint-fix
        :after js2-mode
        :commands eslint-fix
        :init
        (add-hook 'js2-mode-hook
                  (lambda () (add-hook 'flycheck-before-syntax-check-hook 'eslint-fix nil 'local))))
    #+end_src

*** =node=.

**** REPL.

     #+begin_src emacs-lisp
       (use-package nodejs-repl
         :commands nodejs-repl)
     #+end_src

** =json=.

*** Helper functions.

    #+begin_src emacs-lisp
      (defun my/json-sort-setup ()
        "Sets JSON sorting before save if requested"
        (interactive)
        (when (y-or-n-p "Enable JSON sorting?")
          (add-hook 'before-save-hook 'my/json-sort-at-point nil 'local)))

      (defun my/json-sort-at-point ()
        "Sort JSON-like structure surrounding the point."
        (interactive)
        (let ((object-begin (nth 1 (syntax-ppss (point)))))
          (when object-begin
            (save-excursion
              (goto-char object-begin)
              (forward-list)
              (json-pretty-print-ordered object-begin (point))
              (indent-region object-begin (point))))))
    #+end_src

*** Initialization.

    #+begin_src emacs-lisp
      (use-package json-mode
        :commands json-mode
        :config
        (setq json-encoding-default-indentation "    ")
        (add-hook 'json-mode-hook 'my/json-sort-setup)
        (major-def
          :keymaps 'json-mode-map
          "p" '(json-mode-show-path :which-key "path")))
    #+end_src

** =eshell=.

   #+begin_src emacs-lisp
     (advice-add 'ansi-color-apply-on-region :before 'my/ansi-color-apply-on-region)

     (defun my/ansi-color-apply-on-region (begin end)
       "Fix progress bars for e.g. apt(8). Display progress in the mode line instead."
       (let ((end-marker (copy-marker end)) mb)
         (save-excursion
           (goto-char (copy-marker begin))
           (while (re-search-forward "\0337" end-marker t)
             (setq mb (match-beginning 0))
             (when (re-search-forward "\0338" end-marker t)
               (let ((progress (buffer-substring-no-properties
                                (+ mb 2) (- (point) 2))))
                 (delete-region mb (point))
                 (my/apt-progress-message progress)))))))

     (defun my/apt-progress-message (progress)
       (message
        (replace-regexp-in-string
         "%" "%%"
         (ansi-color-apply progress))))

     (add-hook 'eshell-mode-hook
               (lambda () (general-def
                            :keymaps 'eshell-mode-map
                            :states '(normal visual insert)
                            "C-j" 'eshell-next-input
                            "C-k" 'eshell-previous-input)))
   #+end_src

** =guix=.

   #+begin_src emacs-lisp
     (use-package guix
       :commands guix
       :init
       (leader-def
         "a g" '(guix :which-key "guix")))
   #+end_src

** =nix=.

   #+begin_src emacs-lisp
     (use-package nix-mode
       :mode "\\.nix\\'")

     (use-package nixpkgs-fmt
       :after nix-mode
       :config
       (add-hook 'nix-mode-hook 'nixpkgs-fmt-on-save-mode))

     (use-package company-nixos-options
       :after (nix-mode nixos-options)
       :config
       (add-to-list 'company-backends 'company-nixos-options))
   #+end_src

** =yaml=.

   #+begin_src emacs-lisp
     (use-package yaml-mode
       :mode "\\.yaml\\'")
   #+end_src

** =vagrant=.

   #+begin_src emacs-lisp
     (use-package vagrant)
   #+end_src

** =extempore=.

   #+begin_src emacs-lisp
     (use-package extempore-mode
       :commands (extempore-mode)
       :init
       (unless (fboundp 'eldoc-beginning-of-sexp)
         (defalias 'eldoc-beginning-of-sexp 'elisp--beginning-of-sexp)))
   #+end_src

** =go=.

   #+begin_src emacs-lisp
     (use-package go-mode
       :commands (go-mode)
       :init
       (add-hook 'go-mode-hook
                 (lambda () (add-hook 'before-save-hook 'gofmt-before-save nil 'local))))
     (use-package flycheck-golangci-lint
       :after (go-mode)
       :hook (go-mode . flycheck-golangci-lint-setup))
   #+end_src

** =lsp=.

*** Initialization.

    #+begin_src emacs-lisp
      (use-package lsp-mode
        :commands (lsp lsp-deffered)
        :hook
        (elm-mode . lsp-deferred)
        (lsp-mode . lsp-enable-which-key-integration)
        :config
        (setq lsp-headerline-breadcrumb-enable nil)
        (setq lsp-enable-completion-at-point nil)
        (setq lsp-completion-show-detail nil)
        (setq lsp-completion-show-kind nil)
        (setq lsp-enable-file-watchers nil)
        (setq lsp-enable-imenu nil)
        (setq lsp-imenu-show-container-name nil)
        (setq lsp-diagnostics-disabled-modes '(elm-mode))
        (setq lsp-idle-delay 0))
    #+end_src

*** Ivy integration.

    #+begin_src emacs-lisp
      (use-package lsp-ivy
        :commands (lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol))
    #+end_src

*** Treemacs integration.

    #+begin_src emacs-lisp
      (use-package lsp-treemacs
        :init
        (lsp-treemacs-sync-mode t)
        :commands (lsp-treemacs-errors-list))
    #+end_src

** =smartparens=.

   #+begin_src emacs-lisp
     (use-package smartparens
       :commands smartparens-mode
       :init
       (add-hook 'prog-mode-hook 'smartparens-mode)
       :config
       (require 'smartparens-config))
   #+end_src

** =direnv=.

   #+begin_src emacs-lisp
     (use-package envrc
       :commands envrc-mode
       :init
       (add-hook 'prog-mode-hook 'envrc-mode))
   #+end_src

** =jenkins=.

   #+begin_src emacs-lisp
     (use-package jenkins
       :commands (jenkins)
       :init
       (leader-def
         "a j" '(jenkins :which-key "jenkins"))
       (evil-set-initial-state 'jenkins-mode 'motion)
       (evil-set-initial-state 'jenkins-job-view-mode 'motion)
       (evil-set-initial-state 'jenkins-console-output-mode 'motion)
       :config
       (general-def
         :states '(motion)
         :keymaps 'jenkins-mode-map
         "g r" 'revert-buffer
         "RET" 'jenkins-enter-job
         "b" 'jenkins--call-build-job-from-main-screen
         "r" 'jenkins--call-rebuild-job-from-main-screen
         "q" 'kill-buffer-and-window)
       (general-def
         :states '(motion)
         :keymaps 'jenkins-job-view-mode-map
         "g r" '(jenkins--refresh-job-from-job-screen :which-key "refresh")
         "RET" 'jenkins--show-console-output-from-job-screen
         "b" 'jenkins--call-build-job-from-job-screen
         "r" 'jenkins--call-rebuild-job-from-job-screen)
       (setq jenkins-url "https://ci.conta.no")
       (setq jenkins-api-token (auth-source-pick-first-password :host "ci.conta.no"))
       (setq jenkins-username "akoppela"))
   #+end_src

** =vterm=.

*** Helper functions.

    #+begin_src emacs-lisp
      (defun my/terminal ()
        "Starts terminal using projectile if possible."
        (interactive)
        (if (projectile-project-p)
            (projectile-run-vterm nil)
          (vterm)))
    #+end_src

*** Initialization.

    #+begin_src emacs-lisp
      (use-package vterm
        :commands (vterm)
        :init
        (leader-def
          "a t" '(my/terminal :which-key "terminal"))
        :config
        (major-def
          "c" '(vterm-copy-mode :which-key "copy mode"))
        (general-def
          :states '(normal visual)
          :keymaps 'vterm-mode-map
          ;; up
          "M-O A" 'evil-previous-line
          ;; down
          "M-O B" 'evil-next-line
          ;; left
          "M-O C" 'evil-backward-char
          ;; right
          "M-O D" 'evil-forward-char))
    #+end_src

** =csv/tsv=.

   #+begin_src emacs-lisp
     (use-package csv-mode
       :commands (csv-mode tsv-mode))
   #+end_src

** =docker=.

   #+begin_src emacs-lisp
     (use-package docker
       :commands docker
       :init
       (leader-def
         "a D" '(docker :which-key "docker")))
     (use-package docker-tramp)
   #+end_src

* Communication and connection.

** RSS reader.

   #+begin_src emacs-lisp
     (use-package elfeed
       :commands elfeed
       :config
       (leader-def
         "a f" 'elfeed)
       (major-def
         :keymaps 'elfeed-search-mode-map
         "u" '(elfeed-update :which-key "update")))

     (use-package elfeed-org
       :after (elfeed org)
       :init
       (setq rmh-elfeed-org-files (list "~/Notes/rss.org"))
       :config
       (elfeed-org))
   #+end_src

** IRC.

   #+begin_src emacs-lisp
     (major-def
       :keymaps 'rcirc-mode-map
       "j" '(rcirc-cmd-join :which-key "join"))
   #+end_src

** VPN.

*** Helper functions.

    #+begin_src emacs-lisp
      (defconst my/vpn-conf (expand-file-name "~/vpn/do.ovpn"))

      (defun my/connect-vpn ()
        "Connects to VPN"
        (interactive)
        (ovpn-mode-start-vpn-conf my/vpn-conf))

      (defun my/disconnect-vpn ()
        "Disconnects from VPN"
        (interactive)
        (ovpn-mode-stop-vpn-conf my/vpn-conf))
    #+end_src

*** Initialization.

    #+begin_src emacs-lisp
      (use-package ovpn-mode
        :init
        (leader-def
          "a v" '(:ignore t :which-key "vpn")
          "a v c" '(my/connect-vpn :which-key "connect")
          "a v d" '(my/disconnect-vpn :which-key "disconnect")))
    #+end_src

** Transmission.

   #+begin_src emacs-lisp
     (use-package transmission
       :commands transmission
       :init
       (setq transmission-refresh-modes
             '(transmission-mode
               transmission-files-mode))
       (leader-def
         "a T" '(transmission :which-key "transmission")))
   #+end_src

** Slack.

   #+begin_src emacs-lisp
     (use-package slack
       :commands (slack-start)
       :init
       (setq slack-request-timeout 120)
       (leader-def
         "a s" '(:ignore t :which-key "slack")
         "a s s" '(slack-start :which-key "start")
         "a s c" '(slack-channel-select :which-key "channel")
         "a s m" '(slack-im-select :which-key "message")
         "a s r" '(slack-select-rooms :which-key "room")
         "a s R" '(slack-select-unread-rooms :which-key "unread room")
         "a s f" '(slack-upload-file :which-key "upload file")
         "a s u" '(slack-all-unreads :which-key "unreads")
         "a s t" '(slack-all-threads :which-key "threads"))
       :config
       (general-def
         :states '(normal visual)
         :keymaps 'slack-mode-map
         "q" 'kill-buffer-and-window)
       (slack-register-team
        :name "Conta"
        :default t
        :token (auth-source-pick-first-password
                :host "conta.slack.com"
                :user "akoppela@gmail.com")
        :visible-threads t
        :animate-image t
        :modeline-enabled t))
   #+end_src

* Help.

** =which-key= shows all available keybindings in a popup.

   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (which-key-mode 1))
   #+end_src

** =helpful= provides *Help* buffer on steroids.

   #+begin_src emacs-lisp
     (use-package helpful
       :init
       (setq counsel-describe-function-function 'helpful-callable)
       (setq counsel-describe-variable-function 'helpful-variable)
       :config
       (general-def
         :states '(normal visual)
         :keymaps 'helpful-mode-map
         "q" 'kill-buffer-and-window))
   #+end_src

** Select help window when open.

   #+begin_src emacs-lisp
     (setq help-window-select t)
   #+end_src

** Display =apropos= buffer in same window.

   #+begin_src emacs-lisp
     (add-to-list 'display-buffer-alist
                  '("*Apropos*" display-buffer-same-window))
   #+end_src

** =dash= documentation.

   #+begin_src emacs-lisp
     (use-package counsel-dash
       :commands counsel-dash
       :init
       (setq counsel-dash-common-docsets '("JavaScript" "Lo-Dash"))
       (leader-def
         "a d" '(counsel-dash :which-key "dash")))
   #+end_src

** Thesaurus synonyms/antonyms.

   #+begin_src emacs-lisp
     (use-package synosaurus
       :commands synosaurus-lookup)
   #+end_src

* The End!
