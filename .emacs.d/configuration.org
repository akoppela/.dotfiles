#+TITLE: Emacs Configuration
#+AUTHOR: Andrey Koppel (akoppela)
#+EMAIL: akoppela@gmail.com

* Personal info.

  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Andrey Koppel")
    (setq user-mail-address "akoppela@gmail.com")
  #+END_SRC

* Package management.

** Initialize =package.el= and include Org, Gnu and Melpa package archives.

   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)
     (setq package-archives '(("org" . "https://orgmode.org/elpa/")
                              ("gnu" . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")))
     (package-initialize)
   #+END_SRC

** TODO Fix a bug when it's not possible to download packages from GNU package archive.

   Should be fixed in Emacs 26.3

   #+BEGIN_SRC emacs-lisp
     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
   #+END_SRC

** Make sure =use-package= is installed.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC

** Initialize =use-package= and set it up to install the package if it's not available yet.

   #+BEGIN_SRC emacs-lisp
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
   #+END_SRC

** Always compile packages, and use the newest version available.

   #+BEGIN_SRC emacs-lisp
     (use-package auto-compile
       :config
       (auto-compile-on-load-mode 1))

     (setq load-prefer-newer t)
   #+END_SRC

* Defaults.

** Setup encoding to UTF-8.

   #+BEGIN_SRC emacs-lisp
     (setq coding-system-for-read 'utf-8)
     (setq coding-system-for-write 'utf-8)
   #+END_SRC

** Start with users home directory by default.

   #+BEGIN_SRC emacs-lisp
     (setq default-directory "~/")
   #+END_SRC

** Increase garbage collection treshold.

   This means GC runs less often, which speeds up some operations.

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-treshold 20000000)
   #+END_SRC

** Delete trailing whitespace everytime buffer is saved.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Always follow symlinks when opening a file.

   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
   #+END_SRC

** Make sure sentenses does not have two spaces after periods.

   #+BEGIN_SRC emacs-lisp
     (setq sentense-end-double-space nil)
   #+END_SRC

** Ask before closing Emacs.

   #+BEGIN_SRC emacs-lisp
     (setq confirm-kill-emacs 'y-or-n-p)
   #+END_SRC

** Set backup files directory.

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+END_SRC

** Set auto save files directory.

   #+BEGIN_SRC emacs-lisp
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+END_SRC

** Shorten yes/no answers.

   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

* Appearance.

** Hide default Emacs screen.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

** Change default scratch message.

   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message (concat "Welcome in Emacs\nStartup time: " (emacs-init-time)))
   #+END_SRC

** Enable custom theme.

   #+BEGIN_SRC emacs-lisp
     (use-package base16-theme
       :init
       (add-to-list 'custom-theme-load-path "~/.emacs.d/akoppela/theme")
       :config
       (setq base16-theme-256-color-source 'colors)
       (load-theme 'base16-akoppela t))
   #+END_SRC

** =mode-line= specific.

*** Initialize =spaceline=.

    #+BEGIN_SRC emacs-lisp
      (use-package spaceline
        :config
        (require 'spaceline-config)
        (spaceline-spacemacs-theme))
    #+END_SRC

*** Change =mode-line= highlight color based on evil mode.

    #+BEGIN_SRC emacs-lisp
      (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    #+END_SRC

*** Hide minor modes.

    #+BEGIN_SRC emacs-lisp
      (spaceline-toggle-minor-modes-off)
    #+END_SRC

*** Show full names for evil state.

    #+BEGIN_SRC emacs-lisp
      (setq evil-normal-state-tag "N")
      (setq evil-insert-state-tag "I")
      (setq evil-visual-state-tag "V")
      (setq evil-replace-state-tag "R")
      (setq evil-operator-state-tag "O")
      (setq evil-motion-state-tag "M")
      (setq evil-emacs-state-tag "E")
    #+END_SRC

*** Show date and time.

    #+BEGIN_SRC emacs-lisp
      (defun padDateNumber (stringNumber)
        (format "%02d" (string-to-number stringNumber)))

      (setq display-time-string-forms
            '(24-hours ":" minutes " " dayname " "  (padDateNumber day) "/" (padDateNumber month) "/" year))

      (display-time-mode 1)
    #+END_SRC

** Hide menu and tool bars.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
   #+END_SRC

** Enable current line highlighting.

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC

** Turn on syntax highlighting whenever possible.

   #+BEGIN_SRC emacs-lisp
     (global-font-lock-mode 1)
   #+END_SRC

** Visually indicate matching parentheses.

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
     (setq show-paren-delay 0.0)
   #+END_SRC

** Flash screen on invalid operation.

   #+BEGIN_SRC emacs-lisp
     (setq visible-bell t)
   #+END_SRC

** Display visual line numbers.

   Visual lines are relative screen lines.

   #+BEGIN_SRC emacs-lisp
     (global-display-line-numbers-mode)
     (setq display-line-numbers-type 'visual)
     (setq display-line-numbers-width-start t)
   #+END_SRC

** Always indent with spaces

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** Use 4 spaces for tabs.

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
   #+END_SRC

** Smooth scroll.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC

** Center cursor vertically.

   #+BEGIN_SRC emacs-lisp
     (use-package centered-cursor-mode
       :config
       (global-centered-cursor-mode 1))
   #+END_SRC

** Add color background for hexadecimal strings.

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :config (add-hook 'prog-mode-hook 'rainbow-mode))
   #+END_SRC

* Navigation.

** =counsel= completion framework.

   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :config
       (ivy-mode 1))
   #+END_SRC

** =multiple-cursors=.

   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors)
   #+END_SRC

* Key bindings.

** =evil= provides =vi= key bindings.

*** Initialize =evil=.

    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :init
        (setq evil-want-C-i-jump nil)
        (setq evil-want-integration t)
        (setq evil-want-keybinding nil)
        :config
        (evil-mode 1))
    #+END_SRC

*** Enable =evil-surround=.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-surround
        :after evil
        :config
        (global-evil-surround-mode 1))
    #+END_SRC

*** Enable =evil-org=.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :after (evil org)
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook (lambda () (evil-org-set-key-theme)))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
    #+END_SRC

*** Enable =evil-commentary=.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-commentary
        :after evil
        :config
        (evil-commentary-mode 1))
    #+END_SRC

*** Enable =evil-collection=.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-collection
        :after evil
        :config
        (evil-collection-init))
    #+END_SRC

** =general= makes it easier to assign key bindings.

*** Initialize.

    #+BEGIN_SRC emacs-lisp
      (use-package general
        :config
        (general-create-definer leader-def
          :states '(normal visual insert motion emacs)
          :keymaps 'override
          :prefix "SPC"
          :non-normal-prefix "C-SPC")
        (general-create-definer major-def
          :states '(normal visual motion emacs)
          :prefix ","
          :non-normal-prefix "C-,"))
    #+END_SRC

*** Main menu.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "" nil
        "SPC" '(counsel-M-x :which-key "M-x")
        "/" '(counsel-projectile-git-grep :which-key "find in project"))
    #+END_SRC

*** Buffer.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "b" '(:ignore t :which-key "buffer")
        "b b" '(ivy-switch-buffer :which-key "switch")
        "b d" '(kill-current-buffer :which-key "delete")
        "b x" '(kill-buffer-and-window :which-key "delete with window")
        "b r" '(rename-buffer :which-key "rename"))
    #+END_SRC

*** Window.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "w" '(:ignore t :which-key "window")
        "w TAB" '(other-window :which-key "next")
        "w d" '(delete-window :which-key "delete")
        "w D" '(delete-other-windows :which-key "delete other")

        "w s" '(:ignore t :which-key "split")
        "w s h" '(split-window-below :which-key "split horizontally")
        "w s v" '(split-window-right :which-key "split vertically"))
    #+END_SRC

*** File.

**** Helper functions.

     #+BEGIN_SRC emacs-lisp
       (defun akoppela/delete-file-and-buffer ()
         "Kill the current buffer and delete the file it's visiting."
         (interactive)
         (let ((filename (buffer-file-name)))
           (if filename
               (if (vc-backend filename)
                   (vc-delete-file filename)
                 (progn (delete-file filename)
                        (message "Deleted file %s." filename)
                        (kill-buffer)))
             (message "Can't delete file."))))
     #+END_SRC

**** Bindings.

     #+BEGIN_SRC emacs-lisp
       (leader-def
         "f" '(:ignore t :which-key "file")
         "f f" '(counsel-find-file :which-key "find")
         "f s" '(save-buffer :which-key "save")
         "f r" '(rename-file :which-key "rename")
         "f d" '(akoppela/delete-file-and-buffer :which-key "delete")

         "f e" '(:ignore t :which-key "emacs")
         "f e c" '(akoppela/open-configuration :which-key "configuration")
         "f e r" '(akoppela/load-configuration :which-key "reload configuration"))
     #+END_SRC

*** Project.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "p" '(:ignore t :which-key "project")
        "p f" '(counsel-projectile-find-file :which-key "find file")
        "p p" '(counsel-projectile-switch-project :which-key "switch"))
    #+END_SRC

*** Search.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "s" '(:ignore t :which-key "search")
        "s s" '(swiper-isearch :which-key "buffer")
        "s S" '(swiper-isearch-thing-at-point :which-key "buffer with thing at point"))
    #+END_SRC

*** Error.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "e" '(:ignore t :which-key "error")
        "e n" '(flycheck-next-error :which-key "next")
        "e p" '(flycheck-previous-error :which-key "previous"))
    #+END_SRC

*** Git.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "g" '(:ignore t :which-key "git")
        "g s" '(magit-status :which-key "status")
        "g b" '(magit-blame :which-key "blame"))
    #+END_SRC

*** Help.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "h" '(:ignore t :which-key "help")
        "h f" '(counsel-describe-function :which-key "describe function")
        "h v" '(counsel-describe-variable :which-key "describe variable")
        "h k" '(helpful-key :which-key "describe key")
        "h b" '(benchmark-init/show-durations-tabulated :which-key "benchmark emacs initialization"))
    #+END_SRC

*** Quit.

    #+BEGIN_SRC emacs-lisp
      (leader-def
        "q" '(:ignore t :which-key "quit")
        "q q" '(save-buffers-kill-terminal :which-key "client")
        "q Q" '(save-buffers-kill-emacs :which-key "server"))
    #+END_SRC

* Project management.

** =projectile=.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :config
       (projectile-mode 1)
       (setq projectile-completion-system 'ivy))

     (use-package counsel-projectile
       :after (projectile counsel)
       :config
       (counsel-projectile-mode 1))
   #+END_SRC

** =magit= for Git related stuff.

   #+BEGIN_SRC emacs-lisp
     (defun akoppela/magit-clean-quit ()
       "Restore window configuration and kill all Magit buffers."
       (interactive)
       (let ((buffers (magit-mode-get-buffers)))
         (magit-restore-window-configuration)
         (mapc #'kill-buffer buffers)))

     (use-package magit)
       ;; :config
       ;; (general-def
       ;;   :states 'normal
       ;;   :keymaps 'magit-status-mode-map
       ;;   "q" 'akoppela/magit-clean-quit))

     (use-package evil-magit
       :after (evil magit))
   #+END_SRC

* Document content management.

** =company= enables auto-completion.

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 2)
       (setq company-dabbrev-downcase nil))
     (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC

** =flycheck= checks syntax.

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck)
   #+END_SRC

** =flyspell= checks spelling.

   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :config
       (add-hook 'text-mode-hook 'flyspell-mode)
       (add-hook 'prog-mode-hook 'flyspell-prog-mode)
       (add-hook 'org-mode-hook 'flyspell-mode)
       (add-hook 'git-commit-mode-hook 'flyspell-mode))
   #+END_SRC

* Task management.

  The killer =org-mode=.

** Key bindings.

   #+BEGIN_SRC emacs-lisp
     (major-def
       :keymaps 'org-mode-map
       "'" '(org-edit-special :which-key "src editor")

       "d" '(:ignore t :which-key "date")
       "d s" '(org-schedule :which-key "schedule")

       "s" '(:ignore t :which-key "subtree")
       "s r" '(org-refile :which-key "refile"))

     (general-def
       :definer 'minor-mode
       :states 'normal
       :keymaps 'org-src-mode
       "'" 'org-edit-src-exit
       "q" 'org-edit-src-abort)
   #+END_SRC

** Show bullets instead of stars.

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :after org
       :init
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC

** Change collapsed subtree symbol.

   #+BEGIN_SRC emacs-lisp
     (setq org-ellipsis " ↴")
   #+END_SRC

** Make TAB act natively for code blocks.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

** Custom TODO keywords.

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords '((sequence "TODO" "PROG" "|" "DONE")))
     (setq org-todo-keyword-faces
           `(("TODO" . (:background ,base16-akoppela-base01 :foreground ,base16-akoppela-base08 :weight bold))
             ("PROG" . (:background ,base16-akoppela-base01 :foreground ,base16-akoppela-base0D :weight bold))
             ("DONE" . (:background ,base16-akoppela-base01 :foreground ,base16-akoppela-base0B :weight bold))))
     (setq org-log-done t)
   #+END_SRC

** Agenda files.

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-files (list "~/org/notes.org"))
    #+END_SRC

** Better =org-refile=.

   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
     (setq org-refile-use-outline-path 'file)
     (setq org-outline-path-complete-in-steps nil)
     (setq org-refile-allow-creating-parent-nodes 'confirm)
   #+END_SRC

* Programming languages.

** =html=.

   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :config
       (emmet-preview-mode 0)
       (add-hook 'sgml-mode-hook 'emmet-mode)
       (add-hook 'css-mode-hook 'emmet-mode)

       (general-def
         :definer 'minor-mode
         :states 'insert
         :keymaps 'emmet-mode
         "TAB" 'emmet-expand-line))
   #+END_SRC

** =elm=.

   #+BEGIN_SRC emacs-lisp
     (use-package elm-mode
       :config
       (turn-off-elm-indent)
       (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
       (add-hook 'elm-mode-hook 'flycheck-mode)
       (remove-hook 'elm-mode-hook 'elm-indent-mode))

     (use-package flycheck-elm
       :after (flycheck elm)
       :config
       (add-hook 'flycheck-mode-hook 'flycheck-elm-setup))
   #+END_SRC

* Help.

** =which-key= shows all available keybindings in a popup.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (which-key-mode 1))
   #+END_SRC

** =helpful= provides *Help* buffer on steroids.

   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :config
       (setq counsel-describe-function-function #'helpful-callable)
       (setq counsel-describe-variable-function #'helpful-variable)
       ;; (general-def
       ;;   :states 'normal
       ;;   :keymaps 'helpful-mode-map
       ;;   "q" 'kill-buffer-and-window))
       )
   #+END_SRC

** Benchmark emacs initialization.

   #+BEGIN_SRC emacs-lisp
     (use-package benchmark-init
       :config
       (add-hook 'after-init-hook 'benchmark-init/deactivate))
   #+END_SRC

* News.

** =elfeed= RSS reader.

   #+BEGIN_SRC emacs-lisp
     (use-package elfeed)
     (use-package elfeed-org
       :after (elfeed org)
       :config
       (progn
         (elfeed-org)
         (setq rmh-elfeed-org-files (list "~/org/rss.org"))))
   #+END_SRC

* The End!
